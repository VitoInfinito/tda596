# Lab 4 helper functions 
# This skeleton does not handle race conditions/locks

# ------------------------------------------------------------------------------   
# Start listening and handle incoming connections in board() function
# ------------------------------------------------------------------------------   
def start_board():
  ip = mycontext['ip']
  port = mycontext['port']
  print "Listening on IP " + str(ip) +" port " + str(port)
  try: 
    listencommhandle = waitforconn(ip,port,board)
  except Exception, e:
    print "Exception in start_board: %s, %s\n" %(type(e), e)
    raise
    #pass

# ------------------------------------------------------------------------------    
# Called when an incoming message is received. 
# ------------------------------------------------------------------------------    
def board(ip, port, sockobj, thiscommhandle, listencommhandle):
  try:
    msgheader = sockobj.recv(1024) # Receive message
    
    # React depending on message type: HTTP GET or POST, or some other type of communication.
    if msgheader.startswith( 'GET' ):
      handle_request_get(msgheader, sockobj, thiscommhandle)
    elif msgheader.startswith( 'POST /Add' ):
      handle_request_add(msgheader, sockobj, thiscommhandle)
    elif msgheader.startswith( 'POST /Change' ):
      handle_request_change(msgheader, sockobj, thiscommhandle)
    else:
      rec_msg(msgheader)
  except Exception, e:
    stre = str(e)
    if stre == "Socket closed" or stre == "timed out":
      print "Socket error. Ignoring"
      pass
    else:
      print "Exception in board: %s, %s\n" %(type(e), e)
      raise
# ------------------------------------------------------------------------------
# Handles initial GET request from browser, outputs HTML string and closes socket.
# ------------------------------------------------------------------------------
def handle_request_get(msgheader, sockobj, thiscommhandle):
  htmlresponse = generate_html_page("")
  sockobj.send(make_http_ok_response(htmlresponse))
  stopcomm(thiscommhandle)  

# ------------------------------------------------------------------------------
# Handles POST \Add request from browser
# ------------------------------------------------------------------------------
def handle_request_add(msgheader, sockobj, thiscommhandle):
  print "Received Add"
  #check if valid request (contains comment)
  comment=msgheader.split('comment=')[1]

  #Add comment to board message
  add_to_board(comment)
  
  # Send the page
  handle_request_get(msgheader, sockobj, thiscommhandle)
  
# ------------------------------------------------------------------------------
# Handles POST /Change request from browser
# ------------------------------------------------------------------------------
def handle_request_change(msgheader, sockobj, thiscommhandle):
  print "Received POST /Change"
  mycontext['boardLock'].acquire()
  #increment logical clock
  #mycontext['ts'] = mycontext['ts'] + 1

  #extract the query from the HTTP request  
  query = extract_http_request_contents(msgheader)
  # extract the query parameters
  parameters = extract_parameters_from_query(query)
  comment = parameters['comment']
  action = parameters['action']
  ref_ts = int(parameters['seq'])
  ref_ip = parameters['ip']
  ref_port = int(parameters['port'])

  #If action is delete, send information to function deleteMessage
  if action == 'Delete':
    deleteMessage(ref_ts, ref_ip, ref_port)

  mycontext['boardLock'].release()
  
  #Send the page
  handle_request_get(msgheader, sockobj, thiscommhandle)

# ------------------------------------------------------------------------------
# Function for handling deleting of messages
# ------------------------------------------------------------------------------
def deleteMessage(ref_ts, ref_ip, ref_port):
  if ref_ts in mycontext['board'] and mycontext['board'][ref_ts].ip == ref_ip:
    # Settings state of message to deleted (This makes for easier control if several
    # delete actions were made concurrently and for future implementations if user would want to
    # be able to bring back a deleted message)
    mycontext['board'][ref_ts].state = "deleted"

    local_port = mycontext['port']
    for ip in mycontext['ipAddresses']:
      # Checking if the ip is the machine we are on or not.
      # Sending messages only to the other nodes in the network
      if ip != mycontext['ip']:
        send_msg(mycontext['board'][ref_ts], "DELETEMESSAGE", ip, local_port)


  
# ------------------------------------------------------------------------------
# Wrap into HTTP headers
# ------------------------------------------------------------------------------
def make_http_ok_response(htmlresponse):
    return "HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
    "Content-length: %i\r\n\r\n%s" % (len(htmlresponse), htmlresponse)

# ------------------------------------------------------------------------------
# Utility function to extract the contents (payload) from HTTP request
# ------------------------------------------------------------------------------
def extract_http_request_contents(header):
  # find content length
  conent_length = header.split('Content-Length: ')[1]
  conent_length = int(conent_length.split('\r\n')[0])
  
  # extract the http response body and discard the header
  contetns = header[-conent_length:]
  return contetns

# ------------------------------------------------------------------------------
# Utility function to extract query parameter from HTML query
# ------------------------------------------------------------------------------
def extract_parameters_from_query(msg):
  # extract the query parameters as a dictionary: {name:value}
  # example input format: comment=aa&ts=2&ip=127.0.0.1&port=63101&action=Delete
  parameters={}
  arr = msg.split('&')
  for a in arr:
    pp = a.split('=')
    if len(pp)>1:
      parameters[pp[0]] = pp[1]
  return parameters

# ------------------------------------------------------------------------------    
# Called when we need to parse the comment out of a received message
# ------------------------------------------------------------------------------ 
def fetch_comment(msg):
  return parse_line(msg, "comment=")

# ------------------------------------------------------------------------------    
# Called when we need to parse the id out of a received message
# ------------------------------------------------------------------------------ 
def fetch_id(msg):
  return parse_line(msg, "id=")

# ------------------------------------------------------------------------------    
# Called when we need to parse the ip out of a received message
# ------------------------------------------------------------------------------ 
def fetch_ip(msg):
  return parse_line(msg, "ip=")

# ------------------------------------------------------------------------------    
# Called when we need to parse the sequence number out of a received message
# ------------------------------------------------------------------------------ 
def fetch_sequence(msg):
  return parse_line(msg, "seq=")

# ------------------------------------------------------------------------------    
# Called when we need to parse the action out of a received message
# ------------------------------------------------------------------------------ 
def fetch_action(msg):
  return parse_line(msg, "action=")

# ------------------------------------------------------------------------------    
# Returns the first found string following search in lines
# ------------------------------------------------------------------------------ 
def parse_line(lines, searchfield):
  for line in lines.split('\n'):
    line_index = line.find(searchfield)
    if line_index != -1:
      return line[line_index+len(searchfield):]

# ------------------------------------------------------------------------------
# Utility function to wrap an entry with HTML form markup
# ------------------------------------------------------------------------------
def entry_to_html(entry):
  return '''<form class="entry" method="post" action="Change" >
              <input type="text" name="comment" value="%s" size="50"/>
              <input type="hidden" name="seq" value="%u" />
              <input type="hidden" name="ip" value="%s" />
              <input type="hidden" name="port" value="%u" />
              <input type="submit" name="action" value="Modify" />
              <input type="submit" name="action" value="Delete" />
            </form>''' %(entry.msg, entry.seq, entry.ip, mycontext['port'])
       
# ------------------------------------------------------------------------------
# Outputs the blackboard html 
# Optional parameter: status.
# ------------------------------------------------------------------------------   
def generate_html_page(status=""):
  #Initialize blackboard content
  
  # dynamic title showing Ip address, port and up time.
  board_title = '<div id="boardtitle_placeholder" class="boardtitle">Board contents at host: %s:%u, up time: %u sec.</div>' %(mycontext['ip'], mycontext['port'], int(getruntime()))  
  # An optional status message
  status_message = "<div class='status'>%s</div>" % (status)
  
  # convert entries to html
  #entries = [entry_to_html(e) for e in mycontext['board']]
  #entries = "".join(entries)
  entries = '<br>'.join([entry_to_html(x) for x in board_to_ordered_list()])
  
  # merging the contents of the board with the title
  # and wrapping all with <div id="boardcontents_placeholder”>...</div>
  content = [mycontext['headerhtml'], '<div id="boardcontents_placeholder">', board_title, status_message, entries, '</div>', mycontext['footerhtml']]   
  
  #Concatenate strings into huge string representing the final html
  content = "".join(content)
  del entries
  return content

# ------------------------------------------------------------------------------    
# Called when we receive a message that is not POST or GET
# ------------------------------------------------------------------------------ 
def rec_msg(msg):
  # Parsing out request and comment from message 
  request = msg.split('\n', 1)[0]

  # If message had request BOARDUPDATE, we received a new comment from another node
  if request == "BOARDUPDATE":
    print "Received message " + fetch_comment(msg) + " at runtime " + str(getruntime())
    mycontext['boardLock'].acquire()
    # Adding message received to the board
    x = Message(fetch_comment(msg), fetch_sequence(msg), fetch_ip(msg))
    append_to_board(x)
    mycontext['boardLock'].release()
    print "Finished message " + fetch_comment(msg) + " at runtime " + str(getruntime())
  elif request == "DELETEMESSAGE":
    # Setting state of message to deleted
    #comment = fetch_comment(msg)
    mycontext['boardLock'].acquire()
    seq = int(fetch_sequence(msg))
    ip = fetch_ip(msg)

    if seq in mycontext['board']:
      if mycontext['board'][seq].ip == ip:
        mycontext['board'][seq].state = "deleted"
    else:
      # Creating an empty message with state set to deleted to compensate since the message
      # did not arrive before the message was deleted on this vessel
      x = Message("", fetch_sequence(msg), ip)
      append_to_board(x)
    mycontext['boardLock'].release()

# ------------------------------------------------------------------------------    
# Called when broadcasting a message to other vessels
# ------------------------------------------------------------------------------ 
def broadcast(msg, header, port):
  return 0


# ------------------------------------------------------------------------------    
# Called when we need to send a message to another node
# ------------------------------------------------------------------------------ 
def send_msg(msg, header, ip, port):
  print "Sending message to " + ip
  # Opening a socket connection to the chosen node
  socketobject = openconn(ip, port)
  # Sending a message over the opened connection
  msg = header + "\n" + msg.parseObjectToString()
  socketobject.send(msg)
  # Closing socket when message has been sent
  socketobject.close()

# ------------------------------------------------------------------------------    
# Called when we have a message to add
# ------------------------------------------------------------------------------ 
def add_to_board(msg):
  print "Received message " + msg + " at runtime " + str(getruntime())
  # Locking board for further updates
  mycontext['boardLock'].acquire()
  # Creating a new msseage object and append it to the board
  #msg = Message(msg, mycontext['boardSequence'], mycontext['ip'])
  msg = Message(msg, mycontext['ts'], mycontext['ip'])
  append_to_board(msg)
  #mycontext['ts'] += 1
  # Releasing board lock
  mycontext['boardLock'].release()
  
  local_port = mycontext['port']
  for ip in mycontext['ipAddresses']:
    # Checking if the ip is the machine we are on or not.
    # Sending messages only to the other nodes in the network
    if ip != mycontext['ip']:
      send_msg(msg, "BOARDUPDATE", ip, local_port)
  
  print "Finished message " + msg.msg + " at runtime " + str(getruntime())

# ------------------------------------------------------------------------------    
# Appends a message to the board
# ------------------------------------------------------------------------------ 
def append_to_board(msg):
  # If sequence exists in board and it is not identical to message there
  # Can not have the same sequence ID if from the same ip with different messages
  if msg.seq in mycontext['board'] and msg.ip != mycontext['board'][msg.seq].ip:
    print "Wrong order found for message " + msg.msg
    decide_order(msg, mycontext['board'][msg.seq])
  else:
    # Increment logical clock
    mycontext['ts'] += 1
    # If message had been set to deleted earlier, we simply update the message in it
    if msg.seq in mycontext['board'] and mycontext['board'][seq].state == 'deleted':
      mycontext['board'].msg = fetch_comment(msg)
    else:
      mycontext['board'][msg.seq] = msg


# ------------------------------------------------------------------------------    
# Decides order of messages on the board assuming the same sequence number appeared
# Winner is chosen through highest IP and the other calls append_to_board to
# recursively solve possibly new sequence errors and set the wrongly placed message correctly
# ------------------------------------------------------------------------------ 
def decide_order(msg1, msg2):
  if msg1.ip > msg2.ip:
    wrong_msg = msg2
    correct_msg = msg1
  else:
    wrong_msg = msg1
    correct_msg = msg2

  mycontext['board'][correct_msg.seq] = correct_msg
  wrong_msg.seq += 1
  append_to_board(wrong_msg)

class Message:
  seq = ""
  msg = ""
  ip = ""
  state = ""

  def __init__(self, msg="", seq=-1, ip=""):
    self.seq = int(seq)
    self.msg = msg
    self.ip = ip
    self.state = "active"
    print self.parseObjectToString()

  # ------------------------------------------------------------------------------    
  # Parses the object to a string with all variables in sequence
  # ------------------------------------------------------------------------------ 
  def parseObjectToString(self):
    return "comment=" + self.msg + "\nseq=" + str(self.seq) + "\nip=" + self.ip + "\nstate=" + self.state

# ------------------------------------------------------------------------------    
# Creates a list from the sequence numbers stored in the board dictionary by adding
# the the items to a list in order of the sequence number until all items have been found.
# Ignores all items set to deleted state
# ------------------------------------------------------------------------------ 
def board_to_ordered_list():
  # Creates empty list as base
  board_list = []
  # Sets current sequence check at 0 (first possible)
  current = 0
  maximum = len(mycontext['board'])
  # Checks if all items have been added
  while len(board_list) < maximum:
    # If item exists in board dictionary, add it to the list
    if current in mycontext['board']:
      # If state is active, we append it to the board. 
      # Otherwise remove one item from checking and move to next
      if mycontext['board'][current].state == 'active':
        board_list.append(mycontext['board'][current])
      else:
        maximum -= 1

    #Increment current to search next value
    current += 1
  return board_list
  
# ------------------------------------------------------------------------------    
# Main entry point of the program. Initalizes global variables in mycontext
# and calls start_board() which opens the socket for incoming connections.
# ------------------------------------------------------------------------------
if callfunc == 'initialize':
  # Running remotely (assuming that we pass one input argument only when we run remotely):
  # whenever this vessel gets a connection on its IPaddress:Clearinghouseport it'll call function board
  if len(callargs) == 1:
    port = int(callargs[0])
    ip = getmyip()

  # To run locally: use the loopback ip address (127.0.0.1) and a port in the range 63100 .. 63110
  # If you start multiple local instances using different ports, you can debug and test your code locally
  # example:
  # python ../demokit/repy.py ../demokit/restrictions.default skeleton2015advanced.repy 127.0.0.1 63100
  elif len(callargs) == 2:
    port = int(callargs[1])
    ip = callargs[0]
  
  # Fail if we don't have 1 or 2 arguments  
  else:
    raise Exception("Specify a port only for auto detection of IP, or specify IP and port")

  #GLOBAL Variables go to mycontext
  
  #logical clock\timestamp
  mycontext['ts'] = 0 

  # Fetch the neighbouring nodes
  mycontext['ipAddresses'] = []
  for line in file("ipAddresses.txt"):
    mycontext['ipAddresses'].append(line.strip())

  # Bridge ip is acting as a connector between the two groups.
  mycontext['bridgeIp'] = mycontext['ipAddresses'][0]
  print "Bridge IP is " + mycontext['bridgeIp']

  # List of ip adresses belonging to the same group.
  # The groups are always in two sets with half in each (1 more in first if uneven amount)
  # Calculating amount in first group by rounding the divison
  amountInFirstGroup = int(round(len(mycontext['ipAddresses'])/2.0))
  print "First group contains: " + str(amountInFirstGroup)
  if mycontext['ipAddresses'].index(ip) >= amountInFirstGroup:
    mycontext['group'] = mycontext['ipAddresses'][amountInFirstGroup:]
  else:
    mycontext['group'] = mycontext['ipAddresses'][:amountInFirstGroup]

  print "My group contains " + str(mycontext['group'])

  
  #Initialize Port and IP
  mycontext['port'] = port
  mycontext['ip'] = ip
  
  #read header and footer html files
  mycontext['headerhtml'] = file("header.html").read()
  mycontext['footerhtml'] = file("footer.html").read()

  #Initialize board to hold future board entries
  mycontext['board'] = {}
  mycontext['modQueue'] = {}

  # Initialize lock to handle mutex
  mycontext['boardLock'] = getlock()
  
  start_board() 
