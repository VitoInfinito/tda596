# FEEL FREE TO CHANGE THE CODE. 
# This is just a dull example

# ------------------------------------------------------------------------------   
# Start listening and handle incoming connections in board() function
# ------------------------------------------------------------------------------   
def start_board():
  ip = mycontext['ip']
  port = mycontext['port']
  print "Listening on IP " + str(ip) +" port " + str(port)

  # Printing IP of other servers
  for line in mycontext['ipAddresses']:
    print "Found neighbour IP: " + line
  try: 
    listencommhandle = waitforconn(ip,port,board)
  except Exception, e:
    print "Exception in start_board: %s, %s\n" %(type(e), e)
    raise
    #pass

# ------------------------------------------------------------------------------    
# Called when an incoming message is received. 
# ------------------------------------------------------------------------------    
def board(ip, port, sockobj, thiscommhandle, listencommhandle):
  try:
    msgheader = sockobj.recv(1024) # Receive message, 
    # React depending on message type: HTTP GET or POST, or some other type of communication.
    if msgheader.startswith( 'GET' ):
      htmlresponse = generate_html_page()
      sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
      "Content-length: %i\r\n\r\n%s" % (len(htmlresponse), htmlresponse))
      stopcomm(thiscommhandle)   
    elif msgheader.startswith( 'POST' ):
      print msgheader
      sockobj.send("HTTP/1.1 200 OK")
      update_board(fetch_comment(msgheader), ip, port)
    else:
    	rec_msg(msgheader, sockobj)
  except Exception, e:
    print "Exception in board: %s, %s\n" %(type(e), e)
    raise
    #pass

# ------------------------------------------------------------------------------    
# Called when we need to parse the comment out of a received message
# ------------------------------------------------------------------------------ 
def fetch_comment(msg):
  comment_index = msg.find("comment=") + 8
  return msg[comment_index:]

# ------------------------------------------------------------------------------    
# Called when we have a message to update the board with
# ------------------------------------------------------------------------------ 
def update_board(msg, ip, port):
  mycontext['board'].append(msg)
  for board_msg in mycontext['board']:
    print board_msg

  local_port = mycontext['port']
  print ip
  print port
  print local_port
  for ip in mycontext['ipAddresses']:
    if ip != mycontext['ip']:
      print "ye", ip
      send_msg(msg, ip, local_port)
    else:
      print "no", ip

  return 0

# ------------------------------------------------------------------------------    
# Called when we receive a message that is not POST or GET
# ------------------------------------------------------------------------------ 
def rec_msg(msg, sockobj):
  # Parsing out request and comment from message 
  request = msg.split('\n', 1)[0]
  comment = fetch_comment(msg)

  if request == "BOARDUPDATE":
    # Message received was TCP. Closing connection
    sockobj.close()
    # Closing connection
    mycontext['board'].append(comment)


  return 0

# ------------------------------------------------------------------------------    
# Called when we need to send a message to another node
# ------------------------------------------------------------------------------ 
def send_msg(msg, ip, port):
  print "Sending message to " + ip
  socketobject = openconn(ip, port)

  socketobject.send("BOARDUPDATE\ncomment=" + msg)

  #socketobject.close()

  return 0
    
# ------------------------------------------------------------------------------
# Outputs the blackboard html 
# Optional parameters are message and error which are introduced as headers into the html.
# ------------------------------------------------------------------------------   
def generate_html_page(status=""):
  #Initialize blackboard content
  
  # Add messages to entry when loading page
  entry = '<br>'.join(mycontext['board'])
  content ='<div class="entry">%s</div>' %( entry )
  
  # dynamic title showing Ip address, port and up time.
  board_title = '<div id="boardtitle_placeholder" class="boardtitle">Board contents at host: %s:%u, up time: %u sec.</div>' %(mycontext['ip'], mycontext['port'], int(getruntime()))  

  # merging the contents of the board with the title
  # and wrapping all with <div id="boardcontents_placeholder”>...</div>
  content = '<div id="boardcontents_placeholder">%s%s</div>' %(board_title, content)   

  # An optional status message
  status_message = "<div class='status'>%s</div>" % (status)
  
  #Concatenate strings into huge string representing the final html
  content = "".join([mycontext['headerhtml'], status_message, content, mycontext['footerhtml']])
  
  #print content
  return content
  
# ------------------------------------------------------------------------------    
# Main entry point of the program. Initalizes global variables in mycontext
# and calls start_board() which opens the socket for incoming connections.
# ------------------------------------------------------------------------------
if callfunc == 'initialize':
  # Running remotely (assuming that we pass one input argument only when we run remotely):
  # whenever this vessel gets a connection on its IPaddress:Clearinghouseport it'll call function board
  if len(callargs) == 1:
    port = int(callargs[0])
    ip = getmyip()

  # To run locally: use the loopback ip address (127.0.0.1) and a port in the range 63100 .. 63110
  # If you start multiple local instances using different ports, you can debug and test your code locally
  # example:
  # python ../demokit/repy.py ../demokit/restrictions.default skeleton2015advanced.repy 127.0.0.1 63100
  elif len(callargs) == 2:
    port = int(callargs[1])
    ip = callargs[0]
  
  # Fail if we don't have 1 or 2 arguments  
  else:
    raise Exception("Specify a port only for auto detection of IP, or specify IP and port")

  #Initialize Port and IP
  mycontext['port'] = port
  mycontext['ip'] = ip
  
  # Fetch the neighbouring nodes
  mycontext['ipAddresses'] = []
  for line in file("ipAddresses.txt"):
    mycontext['ipAddresses'].append(line.strip())

  # Initialize message board
  mycontext['board'] = []

  #read header and footer html files
  mycontext['headerhtml'] = file("header.html").read()
  mycontext['footerhtml'] = file("footer.html").read()

  start_board()